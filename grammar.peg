// Simple Arithmetics Grammar
// ==========================
//
// Accepts expressions like "2 * (3 + 4)" and computes their value.

Expression
  = head:Term tail:(_ ("+" / "-") _ Term)* {
      return array_reduce($tail, function($result, $element) {
        if ($element[1] === "+") { return $result + $element[3]; }
        if ($element[1] === "-") { return $result - $element[3]; }
      }, $head);
    }

Term
  = head:Factor tail:(_ ("*" / "/") _ Factor)* {
      return array_reduce($tail, function($result, $element) {
        if ($element[1] === "*") { return $result * $element[3]; }
        if ($element[1] === "/") { return $result / $element[3]; }
      }, $head);
    }

Factor
  = "(" _ expr:Expression _ ")" { return $expr; }
  / Function
  / Number

Function
  = _ "sqrt(" int:Number ")" { return sqrt($int); }
  / _ "if(" cond:Condition _ "," _ iftrue:Expression _ "," _ iffalse:Expression _ ")" { return $cond ? $iftrue : $iffalse; }

Condition
  = _ a:Expression _ "=" _ b:Expression { return $a == $b; }
  / _ "in(" a:Expression _ arr:ConditionArg* ")" { return in_array($a, $arr); }

ConditionArg
  = "," _ val:Expression _ { return $val; }

Number "number"
  = _ [+-]?[0-9]+( "." [0-9]+)?([eE][+-]?[0-9]+)? { return floatval($this->text()); }

_ "whitespace"
  = [ \t\n\r]*

